abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
help(cars)
cars
#Basic numerical EDA for cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
hist(cars$speed, xlab= 'speed MPH', main = "hist of speed")
hist(cars$dist, xlab= 'distance in feed', main = "hist of distnace")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
model = lm(dist ~ speed, data = cars)
summary(model)
summary(model)
confint(model) #Creating 95% confidence intervals for the model coefficients.
#Linearity
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Linearity
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Constant Variance & Independent Errors
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
#Normality
qqnorm(model$residuals)
qqline(model$residuals)
#Using the built-in plot() function to visualize the residual plots.
plot(model) #Note the addition of the loess smoother and scale-location plot
#in order to assess whether there is a pronounced non-linear
#relationship. Also the addition of leverage and cook's distance.
#Outliers are observations that have high residual values. The error for these
#observations is relatively large because the observations fall distant from the
#regression line.
#Leverage points are observations that have unusually small or large independent
#variable values; these points fall far from the mean. Thus, these observations
#have a lot of leverage to change the slope of the regression line. The further
#an observation is from the mean of the independent variable, the more leverage
#it has on the slope.
#Cook's distance helps to measure the effect of deleting an observation from the
#dataset and rerunning the regression. Observations that have large residual values
#and also high leverage tend to pose threats to the accuracy of the regression
#line and thus need to be further investigated.
#Visualizing another influence plot for the regression model.
library(car) #Companion to applied regression.
influencePlot(model)
#Visualizing another influence plot for the regression model.
library(car) #Companion to applied regression.
influencePlot(model)
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
#to the predict() function.
predict(model, newdata, interval = "confidence") #Construct confidence intervals
#for the average value of an
#outcome at a specific point.
predict(model, newdata, interval = "prediction") #Construct prediction invervals
#for a single observation's
#outcome value at a specific point.
#Constructing confidence and prediction bands for the scope of our data.
newdata = data.frame(speed = 4:25)
conf.band = predict(model, newdata, interval = "confidence")
pred.band = predict(model, newdata, interval = "prediction")
#Visualizing the confidence and prediction bands.
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
library(car)
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
#value that maximizes the likelihhood of transforming to
#normality.
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
#transformed variable.
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
#a second time?
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
knitr::opts_chunk$set(echo = TRUE)
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(MASS)
summary(cats)
cats
summary(cats)
head(cats)
cats_ <- cats
library(ggplot2)
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt, color = Sex)) +
geom_point()
library(tidyverse)
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt, color = Sex)) +
geom_point()
model.cats_ = lm(Hwt ~ Bwt, data = cats_)
summary(model.cats_)
anova(model.cats_)
plot(model.cats_)
# Hwt = B1 * Bwt + B0 + e
summary(model.cats_)
model.cats_ = lm(Hwt ~ Bwt, data = cats_)
# Hwt = B1 * Bwt + B0 + e
summary(model.cats_)
# Coefficients:
#            Estimate Std. Error t value Pr(>|t|)
#(Intercept)  -0.3567     0.6923  -0.515    0.607
#Bwt           4.0341     0.2503  16.119   <2e-16 ***
# The co-efficient for Bwt (B1) is 4.0341 and is significant.
# The co-efficient for intercept B0 is -.035 and not significant
# we can tell the co-efficients are significant due to being less or more than 0.05 (p-value) and by the signif. codes in the desplay (***)
# yes the overall regression is significant, as the p-value fore the model is less than 0.05 or any threshold.
# RSE can be found at the bottom of the summary,
# Hwt = B1 * Bwt + B0 + e
summary(model.cats_)
plot(model.cats_)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
model = lm(dist ~ speed, data = cars)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
#Normality
qqnorm(model$residuals)
qqline(model$residuals)
qqnorm(model$residuals)
qqline(model$residuals)
plot(model.cats_)
model.cats_.bc <- boxcox(model.cats_)
model.cats_.bc.bc <- boxcox(model.cats_.bc)
View(model.cats_.bc)
View(model.cats_)
View(model.cats_)
bc = boxcox(model.cats_)
lambda = bc$x[which(bc$y == max(bx$y))]
lambda = bc$x[which(bc$y == max(bc$y))]
Hwt.bc = (cats_$Hwt^lambda - 1)/lambda
model.cats_.bc = lm(Hwt.bc ~ cats_$Bwt, cats_)
plot(model.cats_.bc)
boxcox(model.cats_.bc)
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt, color = Sex)) +
geom_point() +
geom_line()
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt, color = Sex)) +
geom_point() +
geom_smooth()
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_smooth()
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_smooth(formula = model.cats_)
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_smooth(formula = model.cats_)
cats_ %>%
ggplot(., aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_line(data = model.cats_)
ggplot(cats_, aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_line(data = model.cats_)
ggplot(cats_, aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_line(data = model.cats_, color = 'blue')
ggplot(cats_, aes(x= Bwt, y= Hwt)) +
geom_point() +
geom_smooth(data = model.cats_, color = 'blue')
cats_ %>%
mutate(., my_model = predict(model.cats_)) %>%
ggplot(.) +
geom_point(aes(Bwt, Hwt)) +
geom_line(aes(Bwt, my_model))
cats_ %>%
mutate(., my_model = predict(model.cats_)) %>%
ggplot(.) +
geom_point(aes(Bwt, Hwt)) +
geom_line(aes(Bwt, my_model)) +
predict(model.cats_)
predict(model.cats_)
cats_ %>%
mutate(., my_model = predict(model.cats_)) %>%
ggplot(.) +
geom_point(aes(Bwt, Hwt)) +
geom_line(aes(Bwt, my_model))
cats_ %>%
mutate(., my_model = predict(model.cats_)) %>%
ggplot(.) +
geom_point(aes(Bwt, Hwt)) +
geom_line(aes(Bwt, my_model))
predict(model.cats_)
cats_ %>%
mutate(., my_model = predict(model.cats_))
cats_ %>%
mutate(., my_model = predict(model.cats_)) %>%
ggplot(.,aes(Bwt, Hwt)) +
geom_point() +
stat_smooth()
cats_ %>%
mutate(., my_model = predict(model.cats_)) %>%
ggplot(.,aes(Bwt, Hwt)) +
geom_point() +
stat_smooth(method = 'lm', color = 'red')
plot(cats_, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
plot(cats_, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
plot(cats_, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
plot(cats_, ylab= 'heart weight', main= 'scatter of cats dataset')
plot(cats_, main= 'scatter of cats dataset')
#abline(model.cats_, lty=2)
cars
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, model.cats_, color = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, model.cats_, color = 'red')
View(model.cats_)
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, model.cats_(cats_$Bwt), color = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, model.cats_(cats_$Bwt), color = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_, cats_$Bwt), color = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_), color = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_), col = 'red')
boxcox(model.cats_)
?which()
conf.band
newdata = data.frame(Bwt= c(2.8, 5, 10))
conf.pred.interval = predict(model.cats_, newdata, interval = c('confidence','prediction'))
newdata = data.frame(Bwt= c(2.8, 5, 10))
conf.interval = predict(model.cats_, newdata, interval = 'confidence')
pred.interval = predict(model.cats_, newdata, interval = 'prediction')
conf.interval
pred.interval
boxcox(model.cats_)
bc = boxcox(model.cats_)
lambda = bc$x[which(bc$y == max(bc$y))]
Hwt.bc = (cats_$Hwt^lambda - 1)/lambda
model.cats_.bc = lm(Hwt.bc ~ cats_$Bwt)
plot(model.cats_.bc)
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
#lines(newdata$Bwt, conf.band[, 2], col = "blue")
#lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_), col = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=Hwt.bc, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
#lines(newdata$Bwt, conf.band[, 2], col = "blue")
#lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_), col = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=cats_$Hwt, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
#lines(newdata$Bwt, conf.band[, 2], col = "blue")
#lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_), col = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=Hwt.bc, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
#lines(newdata$Bwt, conf.band[, 2], col = "blue")
#lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, cats_$Hwt, cats_$Bwt, predict(model.cats_), col = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=Hwt.bc, xlab = "body weight", ylab= 'heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
#lines(newdata$Bwt, conf.band[, 2], col = "blue")
#lines(newdata$Bwt, conf.band[, 3], col = "blue")
segments(cats_$Bwt, Hwt.bc, cats_$Bwt, predict(model.cats_.bc), col = 'red')
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=Hwt.bc, xlab = "body weight", ylab= 'Box-Cox heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
lines(newdata$Bwt, conf.band[, 2], col = "blue")
conf.band[,2]
newdata$Bwt
newdata = data.frame(Bwt =2:4)
conf.band = predict(model.cats_.bc, newdata, interval = 'confidence')
plot(x=cats_$Bwt, y=Hwt.bc, xlab = "body weight", ylab= 'Box-Cox heart weight', main= 'scatter of cats dataset')
abline(model.cats_.bc, lty=2)
segments(cats_$Bwt, Hwt.bc, cats_$Bwt, predict(model.cats_.bc), col = 'red')
summary(model.cats_)
summary(model.cats
summary(model.cats_)
summary(model.cats_)
summary(model.cats_.bc)
summary(model.cats_)
summary(model.cats_.bc)
shiny::runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
install.packages("DT")
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
shiny.launch.browser
options(shiny.launch.browser =TRUE)
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
install.packages("shinydashboard")
install.packages('plotly')
library(shinydashboard)
library(plotly)
library(shiny)
library(tidyverse)
library(DT)
library(ggplot2)
library(shinydashboard)
library(plotly)
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
options(shiny.launch.browser =TRUE)
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Shiny/shinyApps/shinyDashBoard')
runApp('~/Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
library(shiny)
library(tidyverse)
library(DT)
library(ggplot2)
library(shinydashboard)
library(plotly)
paste0("./archive_inventory_",
as.Date(date(),"YYYY-MM-DD"))
date()
as.Date(date())
as.Date(date(),"YYYYMMDD")
Sys.Date()
paste0("./archive_inventory_",Sys.Date())
paste0("./archive_inventory_",Sys.Date(),".csv")
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
options(shiny.launch.browser =TRUE)
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
numeric
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp()
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
options(shiny.launch.browser = T)
shiny::runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
