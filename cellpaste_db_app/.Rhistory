library(shiny)
library(tidyverse)
cell_db <- read_csv("../app_demo_data.csv")
View(cell_db)
View(cell_db)
cell_db <- cell_db %>% transform(cell_db, Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- read_csv("../app_demo_data.csv")
cell_db <- cell_db %>% transform(cell_db, Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- cell_db %>% transform(cell_db, Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- read_csv("../app_demo_data.csv")
cell_db <- read_csv("../app_demo_data.csv")
cell_db <- cell_db %>% transform(cell_db, Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
#ends app run when page is closed in browser
#Thanks to the following for the tip:
#https://stackoverflow.com/questions/35306295/how-to-stop-running-shiny-app-by-closing-the-browser-window
onSessionEnded(function() {stopApp()})
cell_db <- read_csv("../app_demo_data.csv")
cell_db <- cell_db %>% transform(cell_db, Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
}
cell_db <- cell_db %>% transform(cell_db, Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- cell_db %>% transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- read_csv("../app_demo_data.csv")
cell_db <- cell_db %>% transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
View(cell_db)
View(cell_db)
cell_db <- read_csv("../app_demo_data.csv") %>%
transtransform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- read_csv("../app_demo_data.csv") %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(DT)
cell_db <- read_csv("./app_demo_data.csv") %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
output$cell_db_table <- renderDataTable(cell_db)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# numericInput(inputId = "shelf_number",
#              label = "Shelf from Top (top = 1)"),
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
transistion_db <- rbind(cell_db, submission_list)
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
transistion_db <- rbind(cell_db, submission_list)
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat("batch_id","_","bag_number", sep = ""),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
#fields to save when updating database
submission_list <- c(date_action,mod_type,batch_id,bag_number,
cat(batch_id,"_",bag_number, sep = ""),
sample_weight,material_type,operator_name,
freezer_name,shelf_number,reason)
#fields to save when updating database
submission_list <- c("date_action", mod_type,batch_id,bag_number,
cat(batch_id,"_",bag_number, sep = ""),
sample_weight,material_type,operator_name,
freezer_name,shelf_number,reason)
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat(batch_id,"_",bag_number, sep = ""),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat("batch_id","_","bag_number", sep = ""),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
transistion_db <- rbind(cell_db, submission_list)
write.csv(transistion_db, file = "./app_demo_data.csv")
submission_list
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
cat("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
as.character("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
submission_list
#fields to save when updating database
submission_list <- c("date_action","mod_type","batch_id","bag_number",
paste0("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
submission_list
transistion_db <- rbind(cell_db, submission_list)
clas(submission_list[1])
class(submission_list[1])
class(submission_list[4])
class(submission_list[6])
class(submission_list[0])
class(submission_list[1])
