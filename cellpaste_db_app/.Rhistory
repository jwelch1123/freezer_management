geom_bar(position = "dodge", stat = "identity") +
ylab("Number of Restaurants") +
xlab("Borough and Grade of Restaurants")
View(inspections)
closure_by_boro_cuisine <- inspections %>%
filter(., cuisine %in% top_20_cuisines[['cuisine']]) %>%
mutate(., cuisine = gsub("Latin (Cuban, Dominican, Puerto Rican, South & Central American)","Latin", cuisine, fixed = T),
cuisine = gsub("Juice, Smoothies, Fruit Salads", "Juice & Fruit",  cuisine)) %>%
group_by(., boro, cuisine) %>%
count(., action) %>%
pivot_wider(.,
names_from = action,
values_from = n,
values_fill =0) %>%
mutate(percent_closed = (closed + reclosed) / (closed + `no violations` + reclosed + reopened + violations),
percent_initially_closed = (closed) / (closed + `no violations` + reclosed + reopened + violations)) %>%
pivot_longer(.,c(percent_closed, percent_initially_closed) , names_to="closure_type") %>%
select(boro, cuisine,closure_type, value) %>%
ggplot(., aes(x = cuisine, y = value, fill = closure_type)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text( angle=60, hjust = 0.9)) +
facet_wrap(~boro)
closure_by_boro_cuisine
closure_by_boro_cuisine
closure_by_boro_cuisine
View(inspections)
top_20_cuisines <- inspections %>%
count(., cuisine)
View(top_20_cuisines)
inspections %>%
group_by(., boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = boro)) +
geom_line()
inspections %>%
group_by(., boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = as.factor(month), y = avg_score, color = boro)) +
geom_line()
inspections %>%
group_by(., boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = boro)) +
geom_line() +
scale_x_continuous(breaks = 12, labels = month.abb)
month.abb
inspections %>%
group_by(., boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = boro)) +
geom_line() +
scale_x_continuous(breaks = 1:12, labels = month.abb)
inspections %>%
group_by(., borough =boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = boro)) +
geom_line() +
scale_x_continuous(breaks = 1:12, labels = month.abb)
inspections %>%
group_by(., borough =boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = borough)) +
geom_line() +
scale_x_continuous(breaks = 1:12, labels = month.abb)
inspections %>%
group_by(., borough = boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = borough)) +
geom_line()
inspections %>%
group_by(., borough = boro, month) %>%
summarise(., avg_score = mean(score)) %>%
ggplot(., aes(x = month, y = avg_score, color = borough)) +
geom_line() +
scale_x_continuous(breaks = 1:12, labels = month.abb)
inspections %>%
group_by(., boro, month) %>%
count(., action) %>%
pivot_wider(.,
names_from = action,
values_from = n,
values_fill = 0) %>%
mutate(.,
inspection_closure = (closed + reclosed) / (closed + `no violations` + reclosed + reopened + violations)) %>%
ggplot(., aes(x = month, y = inspection_closure, color = boro)) +
geom_line()
inspections %>%
group_by(., boro, month) %>%
count(., action) %>%
pivot_wider(.,
names_from = action,
values_from = n,
values_fill = 0) %>%
mutate(.,
inspection_closure = (closed + reclosed) / (closed + `no violations` + reclosed + reopened + violations)) %>%
ggplot(., aes(x = month, y = inspection_closure, color = boro)) +
geom_line() +
scale_x_continuous(breaks = 1:12, labels = month.abb)
inspections %>%
group_by(., borough = boro, month) %>%
count(., action) %>%
pivot_wider(.,
names_from = action,
values_from = n,
values_fill = 0) %>%
mutate(.,
inspection_closure = (closed + reclosed) / (closed + `no violations` + reclosed + reopened + violations)) %>%
ggplot(., aes(x = month, y = inspection_closure, color = borough)) +
geom_line() +
scale_x_continuous(breaks = 1:12, labels = month.abb)
shiny::runApp('Dropbox (Personal)/NYDSA/Work/Shiny/test_app')
runApp('Dropbox (Personal)/NYDSA/Work/Shiny/test_app')
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
loadData <- function() {
if (exists("responses")) {
responses
}
}
runApp('Dropbox (Personal)/NYDSA/Work/Shiny/test_app')
runApp('Dropbox (Personal)/NYDSA/Work/Shiny/test_app')
heights = rnorm(n = 100, mean = 70, sd=1)
hist(heights)
setset.seed(0)
heights = rnorm(n = 100, mean = 70, sd=1)
hist(heights)
setset.seed(0)
heights = rnorm(n = 100, mean = 70, sd=1)
hist(heights)
plot(density(heights), main = "sample dist of height")
t.statistic = (mean(heights) - 68)/(sd(height)/sqrt(100))
t.statistic
t.statistic = (mean(heights) - 68)/(sd(height)/sqrt(100))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100))
t.statistic
var.test(group1, group2, alternative = "two.sided")
temp.male <- temp %>% filter(., Gender == "Male")
library(ggplot2)
library(ggplot2)
library(dplyr)
temp.male <- temp %>% filter(., Gender == "Male")
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
temp.male <- temp %>% filter(., Gender == "Male")
temp.female <- temp %>% filter(., Gender == "Female")
t.test(temp.male,y=temp.female)
temp.female
t.test(temp.male,temp.female)
t.test(temp.male$Body.Temp,temp.female$Body.Temp)
mean(temp.male$Body.Temp)
mean(temp.female$Body.Temp)
mean(temp.male$Body.Temp)
mean(temp.male$Body.Temp)
mean(temp.male$Body.Temp)
mean(temp.female$Body.Temp)
t.test(temp.male$Body.Temp,temp.female$Body.Temp)
View(responses)
View(responses)
View(responses)
cat("When male and female body temperatures are compared within this dataset
we find that the p-value is considered significant (p=0.024) so the null hypothesis
is rejected in favor of the alternative (that there is a true difference between the measn)")
temp.male <- temp %>% filter(., Gender == "Male") %>% select(., Body.Temp)
type(temp.male)
class(temp.male)
temp.male
temp.male <- temp %>% filter(., Gender == "Male")
temp.female <- temp %>% filter(., Gender == "Female")
t.test(temp.male$Body.Temp,temp.female$Body.Temp)
cat("\n Difference between average Male and Female Body Temperature:", mean(temp.male$Body.Temp)-mean(temp.female$Body.Temp))
var.test(temp.male$Heart.Rate,temp.female$Heart.Rate)
cat("Male Heart rate: ",var(temp.male$Heart.Rate) , "\n")
cat("Female Heart rate: ", var(temp.female$Heart.Rate) , "\n")
temp.male <- temp %>% filter(., Gender == "Male")
temp.female <- temp %>% filter(., Gender == "Female")
hist(temp.male$Heart.Rate)
hist(temp.female$Heart.Rate)
cat("Male Heart rate: ",var(temp.male$Heart.Rate) , "\n")
cat("Female Heart rate: ", var(temp.female$Heart.Rate) , "\n")
cat("It appears that this is a signficant difference between Male and Female heart rate.
Female heart rates appear to be more variable. With nearly double the varience of Male Heart rates")
cat("It appears that this is a signficant difference between Male and Female heart rate. Female heart rates appear to be more variable. With nearly double the varience of Male Heart rates")
PlantGrowth
PlantGrowth %>%
ggplot(aes(x=group)) +
geom_boxplot()
PlantGrowth %>%
ggplot(aes(x=group, y=)) +
geom_boxplot()
PlantGrowth
PlantGrowth %>%
ggplot(aes(x=group, y=weight)) +
geom_boxplot()
nrow(PlantGrowth)
PlantGrowth %>%
ggplot(aes(x=group, y=weight)) +
geom_boxplot()
PlantGrowth %>%
ggplot(aes(x=group, y=weight)) +
geom_boxplot() +
ggtitle("Dried Plant Weight by Growth Condition")
sd(filter(PlantGrowth, group == "ctrl"))
PlantGrowth %>%
ggplot(aes(x=group, y=weight)) +
geom_boxplot() +
ggtitle("Dried Plant Weight by Growth Condition")
sd(filter(PlantGrowth, group == "ctrl")$weight)
sd(filter(PlantGrowth, group == "trt 1")$weight)
sd(filter(PlantGrowth, group == "trt 2")$weight)
sd(filter(PlantGrowth, group == "trt 1")$weight)
sd(filter(PlantGrowth, group == "ctrl")$weight)
PlantGrowth
sd(filter(PlantGrowth, group == "trt1")$weight)
sd(filter(PlantGrowth, group == "trt2")$weight)
cat("Standard Dev of control group:",
sd(filter(PlantGrowth, group == "ctrl")$weight), "\n")
cat("Standard Dev of Treatment 1 group:",
sd(filter(PlantGrowth, group == "trt1")$weight), "\n")
cat("Standard Dev of Treatment 2 group:",
sd(filter(PlantGrowth, group == "trt2")$weight), "\n")
bartlett.test(PlantGrowth$weight,g=PlantGrowth$group)
cat("Though there is some difference between the standard deviations of each treatment it is not statistically significant (p=0.2371) so we accept the null hypothesis that the difference between the standard deviations is 'actually' zero.")
anova(PlantGrowth)
PlantGrowth~group
cat("Average of control group:",
mean(filter(PlantGrowth, group == "ctrl")$weight), "\n")
cat("Average of Treatment 1 group:",
mean(filter(PlantGrowth, group == "trt1")$weight), "\n")
cat("Average of Treatment 2 group:",
mean(filter(PlantGrowth, group == "trt2")$weight), "\n")
t.test(PlantGrowth~group)
t.test(PlantGrowth$weight ~ group)
PlantGrowth
t.test(filter(PlantGrowth, group == "ctrl")$weight,
y=filter(PlantGrowth, group == "trt1")$weight)
t.test(filter(PlantGrowth, group == "ctrl")$weight,
y=filter(PlantGrowth, group == "trt1")$weight)
t.test(filter(PlantGrowth, group == "trt1")$weight,
y=filter(PlantGrowth, group =="trt2"))
t.test(filter(PlantGrowth, group == "trt1")$weight,
y=filter(PlantGrowth, group =="trt2")$weight)
t.test(filter(PlantGrowth, group =="trt2")$weight,
y=filter(PlantGrowth,group=="ctrl")$weight)
PlantGrowth %>%
ggplot(aes(x=group, y=weight)) +
geom_boxplot() +
ggtitle("Dried Plant Weight by Growth Condition")
HairEyeColor
class(HairEyeColor)
HairEyeColor[,,1]
HairEyeColor[1,1,1]
HairEyeColor[2,1,1]
mosaicplot(HairEyeColor, shade = T)
# Question 2 ####
female.brwn.blue.allhair = HairEyeColor[,1:2,2]
female.brwn.blue.allhair
mosaicplot(female.brwn.blue.allhair)
mosaicplot(female.brwn.blue.allhair, shade = T)
chisq.test(female.brwn.blue.allhair)
mosaicplot(female.brwn.blue.allhair, shade = T)
aov(PlantGrowth$weight  ~ PlantGrowth$group)
summary(aov(PlantGrowth$weight  ~ PlantGrowth$group))
chisq.test(female.brwn.blue.allhair)
female.brwn.blue.allhair
margin.table(fem)
margin.table(female.brwn.blue.allhair)
margin.table(female.brwn.blue.allhair,1)
female.brwn.blue.allhair
margin.table(female.brwn.blue.allhair,1)
margin.table(female.brwn.blue.allhair,2)
female.brwn.blue.allhair/sum(female.brwn.blue.allhair)
female.brwn.blue.allhair/sum(female.brwn.blue.allhair)
cat("By dividing each category by the sum we can determine the respective abundance of each category. In an evenly distributed sample each category would have 100/8 ~= 12.5% of the population. We can see from this table that [Eye~hair] Brown~Brown, Blue~Blond are overrepresented (same conclusion as mosaic plot). We can also see that Brown~Red, Blond~Brown, Black~Blue, and Red~Blue are underrepresented.")
shiny::runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
clear
clean
test <- c(47.5162,
47.8903,
48.987,
48.2691,
48.1042,
49.2724,
48.7288,
48.0634,
49.0504,
48.7851,
49.0982,
47.4447,
47.9708,
48.9445)
hist(test)
hist(test)
shiny::runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Desktop/Test_r')
install.packages("shinyjs")
library(shiny)
library(shinyjs)
runApp('Desktop/Test_r')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
submission_list <- c("date_action","mod_type","batch_id","bag_number",
paste0("batch_id","_","bag_number"),
"sample_weight","material_type","operator_name",
"freezer_name","shelf_number","reason")
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
og_cell_db <- read_csv("./app_demo_data.csv")
getwd()
pwd
runApp('Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app')
setwd("~/Dropbox (Personal)/NYDSA/Work/Projects/Shiny_app/cellpaste_db/cellpaste_db_app")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
og_cell_db <- read_csv("./app_demo_data.csv")
View(og_cell_db)
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
runApp()
runApp()
length(pre_submission)
pre_submission <- sapply(submission_list, function(x) input [[x]])
pre_submission <- sapply(submission_list, function(x) input[[x]])
runApp()
runApp()
View(og_cell_db)
print(submission_list)
submission_list <- c("date_action","mod_type","batch_id","bag_number",
paste0("batch_id","_","bag_number"),
"sample_weight","material_type","strain_id", "operator_name",
"freezer_name","shelf_number","reason")
print(submission_list)
runApp()
pre_submission <- sapply(submission_list, function(x) input[[x]])
submission_list <- c(input$date_action, input$mod_type, input$batch_id, input$bag_number,
paste0(input$batch_id,"_",input$bag_number),
input$sample_weight, input$material_type, input$strain_id, input$operator_name,
input$freezer_name, input$shelf_number, input$reason)
runApp()
runApp()
runApp()
runApp()
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
getwd()
og_cell_db <- read_csv("./app_demo_data.csv")
runApp()
runApp()
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db #%>%
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date.character(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%y%m%d"))
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%y%m%d"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%y%m%d"))
output$cell_db_table <- DT::renderDataTable(cell_db)
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%y%m%d"))
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
runApp()
as.Date.character(input$date_action,"%m/%d/%y")
og_cell_db <- read_csv("./app_demo_data.csv")
date_character = "2020-07-04"
class(date_character)
class(as.Date(date_character,"%Y-%m-%d"))
as.Date(date_character,"%Y-%m-%d")
date_date = as.Date(date_character,"%Y-%m-%d")
class(date_date)
class(as.data.frame.character(date_date))
class(as.date.character(date_date))
class(as.Date.character(date_date))
class(as.Date.character(date_date,"%d%m%Y"))
as.Date.character(date_date,"%d%m%Y")
as.Date.Character(date_date,"%d%m%Y")
as.character(date_date,"%d%m%Y")
as.character(date_date,"%m%Y%d")
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db #%>%
runApp()
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv")
View(cell_db)
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
runApp()
runApp()
submission_list <- c(as.character(input$date_action,"%m/%d/%y"),
input$mod_type,
input$batch_id,
input$bag_number,
paste0(input$batch_id,"_",input$bag_number),
input$sample_weight,
input$material_type,
input$strain_id,
input$operator_name,
input$freezer_name,
input$shelf_number,
input$reason)
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD))
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD))
cell_db <- og_cell_db %>%
transform(Date_Added_YYMMDD = as.Date(Date_Added_YYMMDD,"%m/%d/%y"))
chr_date = "7/4/20"
date_date = as.Date(chr_date,"%m/%d/%y")
as.character(date_date, "%m/%d/%y")
as.character.Date(date_date, "%m/%d/%y")
date_date
class(as.character(date_date, "%m/%d/%y"))
class(as.character.Date(date_date, "%m/%d/%y"))
as.character(date_date)
date_date
as.character(date_date)
as.character(date_date, "%m/%d/%y")
as.character.Date(date_date, "%m/%d/%y")
class(as.character(date_date, "%m/%d/%y"))
class(as.character.Date(date_date, "%m/%d/%y"))
class(date_date)
class(as.character(date_date))
View(og_cell_db)
View(og_cell_db)
og_cell_db <- read_csv("./app_demo_data.csv")
cell_db <- og_cell_db %>%
transform(Date_Added = as.Date(Date_Added,"%m/%d/%y"))
runApp()
runApp()
runApp()
og_cell_db <- read_csv("./app_demo_data.csv")
og_cell_db <- read_csv("./app_demo_data.csv") %>%
transform(Date_Added = as.Date(Date_Added,"%m/%d/%y"))
cell_db <- read_csv("./app_demo_data.csv") %>%
transform(Date_Added = as.Date(Date_Added,"%m/%d/%y"))
View(og_cell_db)
cell_db <- read_csv("./app_demo_data.csv") %>%
transform(Date_Added = as.Date(Date_Added,"%m/%d/%y"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
